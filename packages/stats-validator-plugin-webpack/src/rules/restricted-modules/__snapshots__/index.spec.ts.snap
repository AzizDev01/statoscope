// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`matches 1`] = `
Array [
  Object {
    "compilation": "718159f8e48dcecd92c9",
    "details": Array [
      Object {
        "deserialize": Object {
          "content": "
              $theContext: context;
              {
                context: {
                  target: {
                    name: $theContext.target.name.deserializeStringOrRegexp(),
                  },
                  exclude: $theContext.exclude.(deserializeStringOrRegexp)
                }
              }",
          "type": "query",
        },
        "filename": "input.json",
        "query": "
  $input: resolveInputFile();
  $exclude: #.exclude;
  $target: #.target;
  
  $input.group(<compilations>)
    .({file: value.pick(), compilation: key})
    .exclude({
      exclude: $exclude.[type='compilation'].name,
      get: <name>,
    })
    .({
      ...$,
      modules: compilation..modules.[name.isMatch($target.name)]
    }).[modules]
  ",
        "serialized": Object {
          "context": Object {
            "exclude": Array [],
            "target": Object {
              "name": Object {
                "content": "./src/index.ts",
                "type": "string",
              },
            },
          },
        },
        "type": "discovery",
      },
    ],
    "filename": "input.json",
    "message": "Module ./src/index.ts should not be used",
    "related": Array [
      Object {
        "id": "./src/index.ts",
        "type": "module",
      },
    ],
    "type": "error",
  },
  Object {
    "compilation": "718159f8e48dcecd92c9",
    "details": Array [
      Object {
        "deserialize": Object {
          "content": "
              $theContext: context;
              {
                context: {
                  target: {
                    name: $theContext.target.name.deserializeStringOrRegexp(),
                  },
                  exclude: $theContext.exclude.(deserializeStringOrRegexp)
                }
              }",
          "type": "query",
        },
        "filename": "input.json",
        "query": "
  $input: resolveInputFile();
  $exclude: #.exclude;
  $target: #.target;
  
  $input.group(<compilations>)
    .({file: value.pick(), compilation: key})
    .exclude({
      exclude: $exclude.[type='compilation'].name,
      get: <name>,
    })
    .({
      ...$,
      modules: compilation..modules.[name.isMatch($target.name)]
    }).[modules]
  ",
        "serialized": Object {
          "context": Object {
            "exclude": Array [],
            "target": Object {
              "name": Object {
                "content": "^\\\\.\\\\/src",
                "flags": "",
                "type": "regexp",
              },
            },
          },
        },
        "type": "discovery",
      },
    ],
    "filename": "input.json",
    "message": "Module ./src/index.ts + 3 modules should not be used",
    "related": Array [
      Object {
        "id": "./src/index.ts + 3 modules",
        "type": "module",
      },
    ],
    "type": "error",
  },
  Object {
    "compilation": "718159f8e48dcecd92c9",
    "details": Array [
      Object {
        "deserialize": Object {
          "content": "
              $theContext: context;
              {
                context: {
                  target: {
                    name: $theContext.target.name.deserializeStringOrRegexp(),
                  },
                  exclude: $theContext.exclude.(deserializeStringOrRegexp)
                }
              }",
          "type": "query",
        },
        "filename": "input.json",
        "query": "
  $input: resolveInputFile();
  $exclude: #.exclude;
  $target: #.target;
  
  $input.group(<compilations>)
    .({file: value.pick(), compilation: key})
    .exclude({
      exclude: $exclude.[type='compilation'].name,
      get: <name>,
    })
    .({
      ...$,
      modules: compilation..modules.[name.isMatch($target.name)]
    }).[modules]
  ",
        "serialized": Object {
          "context": Object {
            "exclude": Array [],
            "target": Object {
              "name": Object {
                "content": "^\\\\.\\\\/src",
                "flags": "",
                "type": "regexp",
              },
            },
          },
        },
        "type": "discovery",
      },
    ],
    "filename": "input.json",
    "message": "Module ./src/index.ts should not be used",
    "related": Array [
      Object {
        "id": "./src/index.ts",
        "type": "module",
      },
    ],
    "type": "error",
  },
  Object {
    "compilation": "718159f8e48dcecd92c9",
    "details": Array [
      Object {
        "deserialize": Object {
          "content": "
              $theContext: context;
              {
                context: {
                  target: {
                    name: $theContext.target.name.deserializeStringOrRegexp(),
                  },
                  exclude: $theContext.exclude.(deserializeStringOrRegexp)
                }
              }",
          "type": "query",
        },
        "filename": "input.json",
        "query": "
  $input: resolveInputFile();
  $exclude: #.exclude;
  $target: #.target;
  
  $input.group(<compilations>)
    .({file: value.pick(), compilation: key})
    .exclude({
      exclude: $exclude.[type='compilation'].name,
      get: <name>,
    })
    .({
      ...$,
      modules: compilation..modules.[name.isMatch($target.name)]
    }).[modules]
  ",
        "serialized": Object {
          "context": Object {
            "exclude": Array [],
            "target": Object {
              "name": Object {
                "content": "^\\\\.\\\\/src",
                "flags": "",
                "type": "regexp",
              },
            },
          },
        },
        "type": "discovery",
      },
    ],
    "filename": "input.json",
    "message": "Module ./src/sub-module.ts should not be used",
    "related": Array [
      Object {
        "id": "./src/sub-module.ts",
        "type": "module",
      },
    ],
    "type": "error",
  },
  Object {
    "compilation": "718159f8e48dcecd92c9",
    "details": Array [
      Object {
        "deserialize": Object {
          "content": "
              $theContext: context;
              {
                context: {
                  target: {
                    name: $theContext.target.name.deserializeStringOrRegexp(),
                  },
                  exclude: $theContext.exclude.(deserializeStringOrRegexp)
                }
              }",
          "type": "query",
        },
        "filename": "input.json",
        "query": "
  $input: resolveInputFile();
  $exclude: #.exclude;
  $target: #.target;
  
  $input.group(<compilations>)
    .({file: value.pick(), compilation: key})
    .exclude({
      exclude: $exclude.[type='compilation'].name,
      get: <name>,
    })
    .({
      ...$,
      modules: compilation..modules.[name.isMatch($target.name)]
    }).[modules]
  ",
        "serialized": Object {
          "context": Object {
            "exclude": Array [],
            "target": Object {
              "name": Object {
                "content": "^\\\\.\\\\/src",
                "flags": "",
                "type": "regexp",
              },
            },
          },
        },
        "type": "discovery",
      },
    ],
    "filename": "input.json",
    "message": "Module ./src/index2.ts + 1 modules should not be used",
    "related": Array [
      Object {
        "id": "./src/index2.ts + 1 modules",
        "type": "module",
      },
    ],
    "type": "error",
  },
  Object {
    "compilation": "718159f8e48dcecd92c9",
    "details": Array [
      Object {
        "deserialize": Object {
          "content": "
              $theContext: context;
              {
                context: {
                  target: {
                    name: $theContext.target.name.deserializeStringOrRegexp(),
                  },
                  exclude: $theContext.exclude.(deserializeStringOrRegexp)
                }
              }",
          "type": "query",
        },
        "filename": "input.json",
        "query": "
  $input: resolveInputFile();
  $exclude: #.exclude;
  $target: #.target;
  
  $input.group(<compilations>)
    .({file: value.pick(), compilation: key})
    .exclude({
      exclude: $exclude.[type='compilation'].name,
      get: <name>,
    })
    .({
      ...$,
      modules: compilation..modules.[name.isMatch($target.name)]
    }).[modules]
  ",
        "serialized": Object {
          "context": Object {
            "exclude": Array [],
            "target": Object {
              "name": Object {
                "content": "^\\\\.\\\\/src",
                "flags": "",
                "type": "regexp",
              },
            },
          },
        },
        "type": "discovery",
      },
    ],
    "filename": "input.json",
    "message": "Module ./src/index2.ts should not be used",
    "related": Array [
      Object {
        "id": "./src/index2.ts",
        "type": "module",
      },
    ],
    "type": "error",
  },
  Object {
    "compilation": "718159f8e48dcecd92c9",
    "details": Array [
      Object {
        "deserialize": Object {
          "content": "
              $theContext: context;
              {
                context: {
                  target: {
                    name: $theContext.target.name.deserializeStringOrRegexp(),
                  },
                  exclude: $theContext.exclude.(deserializeStringOrRegexp)
                }
              }",
          "type": "query",
        },
        "filename": "input.json",
        "query": "
  $input: resolveInputFile();
  $exclude: #.exclude;
  $target: #.target;
  
  $input.group(<compilations>)
    .({file: value.pick(), compilation: key})
    .exclude({
      exclude: $exclude.[type='compilation'].name,
      get: <name>,
    })
    .({
      ...$,
      modules: compilation..modules.[name.isMatch($target.name)]
    }).[modules]
  ",
        "serialized": Object {
          "context": Object {
            "exclude": Array [],
            "target": Object {
              "name": Object {
                "content": "^\\\\.\\\\/src",
                "flags": "",
                "type": "regexp",
              },
            },
          },
        },
        "type": "discovery",
      },
    ],
    "filename": "input.json",
    "message": "Module ./src/index2.css should not be used",
    "related": Array [
      Object {
        "id": "./src/index2.css",
        "type": "module",
      },
    ],
    "type": "error",
  },
  Object {
    "compilation": "718159f8e48dcecd92c9",
    "details": Array [
      Object {
        "deserialize": Object {
          "content": "
              $theContext: context;
              {
                context: {
                  target: {
                    name: $theContext.target.name.deserializeStringOrRegexp(),
                  },
                  exclude: $theContext.exclude.(deserializeStringOrRegexp)
                }
              }",
          "type": "query",
        },
        "filename": "input.json",
        "query": "
  $input: resolveInputFile();
  $exclude: #.exclude;
  $target: #.target;
  
  $input.group(<compilations>)
    .({file: value.pick(), compilation: key})
    .exclude({
      exclude: $exclude.[type='compilation'].name,
      get: <name>,
    })
    .({
      ...$,
      modules: compilation..modules.[name.isMatch($target.name)]
    }).[modules]
  ",
        "serialized": Object {
          "context": Object {
            "exclude": Array [],
            "target": Object {
              "name": Object {
                "content": "^\\\\.\\\\/src",
                "flags": "",
                "type": "regexp",
              },
            },
          },
        },
        "type": "discovery",
      },
    ],
    "filename": "input.json",
    "message": "Module ./src/test.txt should not be used",
    "related": Array [
      Object {
        "id": "./src/test.txt",
        "type": "module",
      },
    ],
    "type": "error",
  },
  Object {
    "compilation": "718159f8e48dcecd92c9",
    "details": Array [
      Object {
        "deserialize": Object {
          "content": "
              $theContext: context;
              {
                context: {
                  target: {
                    name: $theContext.target.name.deserializeStringOrRegexp(),
                  },
                  exclude: $theContext.exclude.(deserializeStringOrRegexp)
                }
              }",
          "type": "query",
        },
        "filename": "input.json",
        "query": "
  $input: resolveInputFile();
  $exclude: #.exclude;
  $target: #.target;
  
  $input.group(<compilations>)
    .({file: value.pick(), compilation: key})
    .exclude({
      exclude: $exclude.[type='compilation'].name,
      get: <name>,
    })
    .({
      ...$,
      modules: compilation..modules.[name.isMatch($target.name)]
    }).[modules]
  ",
        "serialized": Object {
          "context": Object {
            "exclude": Array [],
            "target": Object {
              "name": Object {
                "content": "^\\\\.\\\\/src",
                "flags": "",
                "type": "regexp",
              },
            },
          },
        },
        "type": "discovery",
      },
    ],
    "filename": "input.json",
    "message": "Module ./src/dyn.ts should not be used",
    "related": Array [
      Object {
        "id": "./src/dyn.ts",
        "type": "module",
      },
    ],
    "type": "error",
  },
  Object {
    "compilation": "718159f8e48dcecd92c9",
    "details": Array [
      Object {
        "deserialize": Object {
          "content": "
              $theContext: context;
              {
                context: {
                  target: {
                    name: $theContext.target.name.deserializeStringOrRegexp(),
                  },
                  exclude: $theContext.exclude.(deserializeStringOrRegexp)
                }
              }",
          "type": "query",
        },
        "filename": "input.json",
        "query": "
  $input: resolveInputFile();
  $exclude: #.exclude;
  $target: #.target;
  
  $input.group(<compilations>)
    .({file: value.pick(), compilation: key})
    .exclude({
      exclude: $exclude.[type='compilation'].name,
      get: <name>,
    })
    .({
      ...$,
      modules: compilation..modules.[name.isMatch($target.name)]
    }).[modules]
  ",
        "serialized": Object {
          "context": Object {
            "exclude": Array [],
            "target": Object {
              "name": Object {
                "content": "^\\\\.\\\\/src",
                "flags": "",
                "type": "regexp",
              },
            },
          },
        },
        "type": "discovery",
      },
    ],
    "filename": "input.json",
    "message": "Module ./src/statoscope.png should not be used",
    "related": Array [
      Object {
        "id": "./src/statoscope.png",
        "type": "module",
      },
    ],
    "type": "error",
  },
  Object {
    "compilation": "718159f8e48dcecd92c9",
    "details": Array [
      Object {
        "deserialize": Object {
          "content": "
              $theContext: context;
              {
                context: {
                  target: {
                    name: $theContext.target.name.deserializeStringOrRegexp(),
                  },
                  exclude: $theContext.exclude.(deserializeStringOrRegexp)
                }
              }",
          "type": "query",
        },
        "filename": "input.json",
        "query": "
  $input: resolveInputFile();
  $exclude: #.exclude;
  $target: #.target;
  
  $input.group(<compilations>)
    .({file: value.pick(), compilation: key})
    .exclude({
      exclude: $exclude.[type='compilation'].name,
      get: <name>,
    })
    .({
      ...$,
      modules: compilation..modules.[name.isMatch($target.name)]
    }).[modules]
  ",
        "serialized": Object {
          "context": Object {
            "exclude": Array [],
            "target": Object {
              "name": Object {
                "content": "./src/index.ts",
                "type": "string",
              },
            },
          },
        },
        "type": "discovery",
      },
    ],
    "filename": "input.json",
    "message": "Module ./src/index.ts should not be used",
    "related": Array [
      Object {
        "id": "./src/index.ts",
        "type": "module",
      },
    ],
    "type": "error",
  },
  Object {
    "compilation": "718159f8e48dcecd92c9",
    "details": Array [
      Object {
        "deserialize": Object {
          "content": "
              $theContext: context;
              {
                context: {
                  target: {
                    name: $theContext.target.name.deserializeStringOrRegexp(),
                  },
                  exclude: $theContext.exclude.(deserializeStringOrRegexp)
                }
              }",
          "type": "query",
        },
        "filename": "input.json",
        "query": "
  $input: resolveInputFile();
  $exclude: #.exclude;
  $target: #.target;
  
  $input.group(<compilations>)
    .({file: value.pick(), compilation: key})
    .exclude({
      exclude: $exclude.[type='compilation'].name,
      get: <name>,
    })
    .({
      ...$,
      modules: compilation..modules.[name.isMatch($target.name)]
    }).[modules]
  ",
        "serialized": Object {
          "context": Object {
            "exclude": Array [],
            "target": Object {
              "name": Object {
                "content": "^\\\\.\\\\/src",
                "flags": "",
                "type": "regexp",
              },
            },
          },
        },
        "type": "discovery",
      },
    ],
    "filename": "input.json",
    "message": "Module ./src/index.ts + 3 modules should not be used",
    "related": Array [
      Object {
        "id": "./src/index.ts + 3 modules",
        "type": "module",
      },
    ],
    "type": "error",
  },
  Object {
    "compilation": "718159f8e48dcecd92c9",
    "details": Array [
      Object {
        "deserialize": Object {
          "content": "
              $theContext: context;
              {
                context: {
                  target: {
                    name: $theContext.target.name.deserializeStringOrRegexp(),
                  },
                  exclude: $theContext.exclude.(deserializeStringOrRegexp)
                }
              }",
          "type": "query",
        },
        "filename": "input.json",
        "query": "
  $input: resolveInputFile();
  $exclude: #.exclude;
  $target: #.target;
  
  $input.group(<compilations>)
    .({file: value.pick(), compilation: key})
    .exclude({
      exclude: $exclude.[type='compilation'].name,
      get: <name>,
    })
    .({
      ...$,
      modules: compilation..modules.[name.isMatch($target.name)]
    }).[modules]
  ",
        "serialized": Object {
          "context": Object {
            "exclude": Array [],
            "target": Object {
              "name": Object {
                "content": "^\\\\.\\\\/src",
                "flags": "",
                "type": "regexp",
              },
            },
          },
        },
        "type": "discovery",
      },
    ],
    "filename": "input.json",
    "message": "Module ./src/index.ts should not be used",
    "related": Array [
      Object {
        "id": "./src/index.ts",
        "type": "module",
      },
    ],
    "type": "error",
  },
  Object {
    "compilation": "718159f8e48dcecd92c9",
    "details": Array [
      Object {
        "deserialize": Object {
          "content": "
              $theContext: context;
              {
                context: {
                  target: {
                    name: $theContext.target.name.deserializeStringOrRegexp(),
                  },
                  exclude: $theContext.exclude.(deserializeStringOrRegexp)
                }
              }",
          "type": "query",
        },
        "filename": "input.json",
        "query": "
  $input: resolveInputFile();
  $exclude: #.exclude;
  $target: #.target;
  
  $input.group(<compilations>)
    .({file: value.pick(), compilation: key})
    .exclude({
      exclude: $exclude.[type='compilation'].name,
      get: <name>,
    })
    .({
      ...$,
      modules: compilation..modules.[name.isMatch($target.name)]
    }).[modules]
  ",
        "serialized": Object {
          "context": Object {
            "exclude": Array [],
            "target": Object {
              "name": Object {
                "content": "^\\\\.\\\\/src",
                "flags": "",
                "type": "regexp",
              },
            },
          },
        },
        "type": "discovery",
      },
    ],
    "filename": "input.json",
    "message": "Module ./src/sub-module.ts should not be used",
    "related": Array [
      Object {
        "id": "./src/sub-module.ts",
        "type": "module",
      },
    ],
    "type": "error",
  },
  Object {
    "compilation": "718159f8e48dcecd92c9",
    "details": Array [
      Object {
        "deserialize": Object {
          "content": "
              $theContext: context;
              {
                context: {
                  target: {
                    name: $theContext.target.name.deserializeStringOrRegexp(),
                  },
                  exclude: $theContext.exclude.(deserializeStringOrRegexp)
                }
              }",
          "type": "query",
        },
        "filename": "input.json",
        "query": "
  $input: resolveInputFile();
  $exclude: #.exclude;
  $target: #.target;
  
  $input.group(<compilations>)
    .({file: value.pick(), compilation: key})
    .exclude({
      exclude: $exclude.[type='compilation'].name,
      get: <name>,
    })
    .({
      ...$,
      modules: compilation..modules.[name.isMatch($target.name)]
    }).[modules]
  ",
        "serialized": Object {
          "context": Object {
            "exclude": Array [],
            "target": Object {
              "name": Object {
                "content": "^\\\\.\\\\/src",
                "flags": "",
                "type": "regexp",
              },
            },
          },
        },
        "type": "discovery",
      },
    ],
    "filename": "input.json",
    "message": "Module ./src/index2.ts + 1 modules should not be used",
    "related": Array [
      Object {
        "id": "./src/index2.ts + 1 modules",
        "type": "module",
      },
    ],
    "type": "error",
  },
  Object {
    "compilation": "718159f8e48dcecd92c9",
    "details": Array [
      Object {
        "deserialize": Object {
          "content": "
              $theContext: context;
              {
                context: {
                  target: {
                    name: $theContext.target.name.deserializeStringOrRegexp(),
                  },
                  exclude: $theContext.exclude.(deserializeStringOrRegexp)
                }
              }",
          "type": "query",
        },
        "filename": "input.json",
        "query": "
  $input: resolveInputFile();
  $exclude: #.exclude;
  $target: #.target;
  
  $input.group(<compilations>)
    .({file: value.pick(), compilation: key})
    .exclude({
      exclude: $exclude.[type='compilation'].name,
      get: <name>,
    })
    .({
      ...$,
      modules: compilation..modules.[name.isMatch($target.name)]
    }).[modules]
  ",
        "serialized": Object {
          "context": Object {
            "exclude": Array [],
            "target": Object {
              "name": Object {
                "content": "^\\\\.\\\\/src",
                "flags": "",
                "type": "regexp",
              },
            },
          },
        },
        "type": "discovery",
      },
    ],
    "filename": "input.json",
    "message": "Module ./src/index2.ts should not be used",
    "related": Array [
      Object {
        "id": "./src/index2.ts",
        "type": "module",
      },
    ],
    "type": "error",
  },
  Object {
    "compilation": "718159f8e48dcecd92c9",
    "details": Array [
      Object {
        "deserialize": Object {
          "content": "
              $theContext: context;
              {
                context: {
                  target: {
                    name: $theContext.target.name.deserializeStringOrRegexp(),
                  },
                  exclude: $theContext.exclude.(deserializeStringOrRegexp)
                }
              }",
          "type": "query",
        },
        "filename": "input.json",
        "query": "
  $input: resolveInputFile();
  $exclude: #.exclude;
  $target: #.target;
  
  $input.group(<compilations>)
    .({file: value.pick(), compilation: key})
    .exclude({
      exclude: $exclude.[type='compilation'].name,
      get: <name>,
    })
    .({
      ...$,
      modules: compilation..modules.[name.isMatch($target.name)]
    }).[modules]
  ",
        "serialized": Object {
          "context": Object {
            "exclude": Array [],
            "target": Object {
              "name": Object {
                "content": "^\\\\.\\\\/src",
                "flags": "",
                "type": "regexp",
              },
            },
          },
        },
        "type": "discovery",
      },
    ],
    "filename": "input.json",
    "message": "Module ./src/index2.css should not be used",
    "related": Array [
      Object {
        "id": "./src/index2.css",
        "type": "module",
      },
    ],
    "type": "error",
  },
  Object {
    "compilation": "718159f8e48dcecd92c9",
    "details": Array [
      Object {
        "deserialize": Object {
          "content": "
              $theContext: context;
              {
                context: {
                  target: {
                    name: $theContext.target.name.deserializeStringOrRegexp(),
                  },
                  exclude: $theContext.exclude.(deserializeStringOrRegexp)
                }
              }",
          "type": "query",
        },
        "filename": "input.json",
        "query": "
  $input: resolveInputFile();
  $exclude: #.exclude;
  $target: #.target;
  
  $input.group(<compilations>)
    .({file: value.pick(), compilation: key})
    .exclude({
      exclude: $exclude.[type='compilation'].name,
      get: <name>,
    })
    .({
      ...$,
      modules: compilation..modules.[name.isMatch($target.name)]
    }).[modules]
  ",
        "serialized": Object {
          "context": Object {
            "exclude": Array [],
            "target": Object {
              "name": Object {
                "content": "^\\\\.\\\\/src",
                "flags": "",
                "type": "regexp",
              },
            },
          },
        },
        "type": "discovery",
      },
    ],
    "filename": "input.json",
    "message": "Module ./src/test.txt should not be used",
    "related": Array [
      Object {
        "id": "./src/test.txt",
        "type": "module",
      },
    ],
    "type": "error",
  },
  Object {
    "compilation": "718159f8e48dcecd92c9",
    "details": Array [
      Object {
        "deserialize": Object {
          "content": "
              $theContext: context;
              {
                context: {
                  target: {
                    name: $theContext.target.name.deserializeStringOrRegexp(),
                  },
                  exclude: $theContext.exclude.(deserializeStringOrRegexp)
                }
              }",
          "type": "query",
        },
        "filename": "input.json",
        "query": "
  $input: resolveInputFile();
  $exclude: #.exclude;
  $target: #.target;
  
  $input.group(<compilations>)
    .({file: value.pick(), compilation: key})
    .exclude({
      exclude: $exclude.[type='compilation'].name,
      get: <name>,
    })
    .({
      ...$,
      modules: compilation..modules.[name.isMatch($target.name)]
    }).[modules]
  ",
        "serialized": Object {
          "context": Object {
            "exclude": Array [],
            "target": Object {
              "name": Object {
                "content": "^\\\\.\\\\/src",
                "flags": "",
                "type": "regexp",
              },
            },
          },
        },
        "type": "discovery",
      },
    ],
    "filename": "input.json",
    "message": "Module ./src/dyn.ts should not be used",
    "related": Array [
      Object {
        "id": "./src/dyn.ts",
        "type": "module",
      },
    ],
    "type": "error",
  },
  Object {
    "compilation": "718159f8e48dcecd92c9",
    "details": Array [
      Object {
        "deserialize": Object {
          "content": "
              $theContext: context;
              {
                context: {
                  target: {
                    name: $theContext.target.name.deserializeStringOrRegexp(),
                  },
                  exclude: $theContext.exclude.(deserializeStringOrRegexp)
                }
              }",
          "type": "query",
        },
        "filename": "input.json",
        "query": "
  $input: resolveInputFile();
  $exclude: #.exclude;
  $target: #.target;
  
  $input.group(<compilations>)
    .({file: value.pick(), compilation: key})
    .exclude({
      exclude: $exclude.[type='compilation'].name,
      get: <name>,
    })
    .({
      ...$,
      modules: compilation..modules.[name.isMatch($target.name)]
    }).[modules]
  ",
        "serialized": Object {
          "context": Object {
            "exclude": Array [],
            "target": Object {
              "name": Object {
                "content": "^\\\\.\\\\/src",
                "flags": "",
                "type": "regexp",
              },
            },
          },
        },
        "type": "discovery",
      },
    ],
    "filename": "input.json",
    "message": "Module ./src/statoscope.png should not be used",
    "related": Array [
      Object {
        "id": "./src/statoscope.png",
        "type": "module",
      },
    ],
    "type": "error",
  },
]
`;

exports[`not matches 1`] = `Array []`;
