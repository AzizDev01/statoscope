// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`matches 1`] = `
Array [
  Object {
    "compilation": undefined,
    "details": Array [
      Object {
        "deserialize": Object {
          "content": "$theContext: context;
                {
                  context: {
                    exclude: $theContext.exclude.(deserializeExclude()),
                    target: {
                      name: $theContext.target.name.deserializeStringOrRegexp()
                    }
                  }
                }",
          "type": "query",
        },
        "filename": "input.json",
        "query": "
  $after: resolveInputFile();
  $reference: resolveReferenceFile();
  $target: #.target;
  $exclude: #.exclude;

  $after.compilations
  .exclude({
    exclude: $exclude.[type='compilation'].name,
    get: <name>,
  })
  ..modules.[name.isMatch($target.name)]
  .group(<name>)
  .({
    $key;
    $afterReasons: value.reasons;
    $referenceReasons: $reference.compilations

    .(
      $compilation: $;
      $key.resolveModule($compilation.hash)
    ).[].reasons;
    $diff: $afterReasons.[
      $item: $;
      not $referenceReasons[=>moduleName=$item.moduleName and userRequest=$item.userRequest and type=$item.type]
    ];
    moduleName: key,
    after: $afterReasons,
    reference: $referenceReasons,
    $diff
  }).[diff]
  ",
        "serialized": Object {
          "context": Object {
            "exclude": Array [],
            "target": Object {
              "name": Object {
                "content": ".+",
                "flags": "",
                "type": "regexp",
              },
            },
          },
        },
        "type": "discovery",
      },
    ],
    "filename": "input.json",
    "message": "Usage of ./src/index.ts + 3 modules was increased from 0 to 1",
    "related": Array [
      Object {
        "id": "./src/index.ts + 3 modules",
        "type": "module",
      },
    ],
    "type": "error",
  },
  Object {
    "compilation": undefined,
    "details": Array [
      Object {
        "deserialize": Object {
          "content": "$theContext: context;
                {
                  context: {
                    exclude: $theContext.exclude.(deserializeExclude()),
                    target: {
                      name: $theContext.target.name.deserializeStringOrRegexp()
                    }
                  }
                }",
          "type": "query",
        },
        "filename": "input.json",
        "query": "
  $after: resolveInputFile();
  $reference: resolveReferenceFile();
  $target: #.target;
  $exclude: #.exclude;

  $after.compilations
  .exclude({
    exclude: $exclude.[type='compilation'].name,
    get: <name>,
  })
  ..modules.[name.isMatch($target.name)]
  .group(<name>)
  .({
    $key;
    $afterReasons: value.reasons;
    $referenceReasons: $reference.compilations

    .(
      $compilation: $;
      $key.resolveModule($compilation.hash)
    ).[].reasons;
    $diff: $afterReasons.[
      $item: $;
      not $referenceReasons[=>moduleName=$item.moduleName and userRequest=$item.userRequest and type=$item.type]
    ];
    moduleName: key,
    after: $afterReasons,
    reference: $referenceReasons,
    $diff
  }).[diff]
  ",
        "serialized": Object {
          "context": Object {
            "exclude": Array [],
            "target": Object {
              "name": Object {
                "content": ".+",
                "flags": "",
                "type": "regexp",
              },
            },
          },
        },
        "type": "discovery",
      },
    ],
    "filename": "input.json",
    "message": "Usage of ../node_modules/is-array/index.js was increased from 0 to 4",
    "related": Array [
      Object {
        "id": "../node_modules/is-array/index.js",
        "type": "module",
      },
    ],
    "type": "error",
  },
  Object {
    "compilation": undefined,
    "details": Array [
      Object {
        "deserialize": Object {
          "content": "$theContext: context;
                {
                  context: {
                    exclude: $theContext.exclude.(deserializeExclude()),
                    target: {
                      name: $theContext.target.name.deserializeStringOrRegexp()
                    }
                  }
                }",
          "type": "query",
        },
        "filename": "input.json",
        "query": "
  $after: resolveInputFile();
  $reference: resolveReferenceFile();
  $target: #.target;
  $exclude: #.exclude;

  $after.compilations
  .exclude({
    exclude: $exclude.[type='compilation'].name,
    get: <name>,
  })
  ..modules.[name.isMatch($target.name)]
  .group(<name>)
  .({
    $key;
    $afterReasons: value.reasons;
    $referenceReasons: $reference.compilations

    .(
      $compilation: $;
      $key.resolveModule($compilation.hash)
    ).[].reasons;
    $diff: $afterReasons.[
      $item: $;
      not $referenceReasons[=>moduleName=$item.moduleName and userRequest=$item.userRequest and type=$item.type]
    ];
    moduleName: key,
    after: $afterReasons,
    reference: $referenceReasons,
    $diff
  }).[diff]
  ",
        "serialized": Object {
          "context": Object {
            "exclude": Array [],
            "target": Object {
              "name": Object {
                "content": ".+",
                "flags": "",
                "type": "regexp",
              },
            },
          },
        },
        "type": "discovery",
      },
    ],
    "filename": "input.json",
    "message": "Usage of ../node_modules/css-loader/dist/runtime/api.js was increased from 0 to 2",
    "related": Array [
      Object {
        "id": "../node_modules/css-loader/dist/runtime/api.js",
        "type": "module",
      },
    ],
    "type": "error",
  },
  Object {
    "compilation": undefined,
    "details": Array [
      Object {
        "deserialize": Object {
          "content": "$theContext: context;
                {
                  context: {
                    exclude: $theContext.exclude.(deserializeExclude()),
                    target: {
                      name: $theContext.target.name.deserializeStringOrRegexp()
                    }
                  }
                }",
          "type": "query",
        },
        "filename": "input.json",
        "query": "
  $after: resolveInputFile();
  $reference: resolveReferenceFile();
  $target: #.target;
  $exclude: #.exclude;

  $after.compilations
  .exclude({
    exclude: $exclude.[type='compilation'].name,
    get: <name>,
  })
  ..modules.[name.isMatch($target.name)]
  .group(<name>)
  .({
    $key;
    $afterReasons: value.reasons;
    $referenceReasons: $reference.compilations

    .(
      $compilation: $;
      $key.resolveModule($compilation.hash)
    ).[].reasons;
    $diff: $afterReasons.[
      $item: $;
      not $referenceReasons[=>moduleName=$item.moduleName and userRequest=$item.userRequest and type=$item.type]
    ];
    moduleName: key,
    after: $afterReasons,
    reference: $referenceReasons,
    $diff
  }).[diff]
  ",
        "serialized": Object {
          "context": Object {
            "exclude": Array [],
            "target": Object {
              "name": Object {
                "content": ".+",
                "flags": "",
                "type": "regexp",
              },
            },
          },
        },
        "type": "discovery",
      },
    ],
    "filename": "input.json",
    "message": "Usage of ../node_modules/css-loader/dist/runtime/getUrl.js was increased from 0 to 2",
    "related": Array [
      Object {
        "id": "../node_modules/css-loader/dist/runtime/getUrl.js",
        "type": "module",
      },
    ],
    "type": "error",
  },
  Object {
    "compilation": undefined,
    "details": Array [
      Object {
        "deserialize": Object {
          "content": "$theContext: context;
                {
                  context: {
                    exclude: $theContext.exclude.(deserializeExclude()),
                    target: {
                      name: $theContext.target.name.deserializeStringOrRegexp()
                    }
                  }
                }",
          "type": "query",
        },
        "filename": "input.json",
        "query": "
  $after: resolveInputFile();
  $reference: resolveReferenceFile();
  $target: #.target;
  $exclude: #.exclude;

  $after.compilations
  .exclude({
    exclude: $exclude.[type='compilation'].name,
    get: <name>,
  })
  ..modules.[name.isMatch($target.name)]
  .group(<name>)
  .({
    $key;
    $afterReasons: value.reasons;
    $referenceReasons: $reference.compilations

    .(
      $compilation: $;
      $key.resolveModule($compilation.hash)
    ).[].reasons;
    $diff: $afterReasons.[
      $item: $;
      not $referenceReasons[=>moduleName=$item.moduleName and userRequest=$item.userRequest and type=$item.type]
    ];
    moduleName: key,
    after: $afterReasons,
    reference: $referenceReasons,
    $diff
  }).[diff]
  ",
        "serialized": Object {
          "context": Object {
            "exclude": Array [],
            "target": Object {
              "name": Object {
                "content": ".+",
                "flags": "",
                "type": "regexp",
              },
            },
          },
        },
        "type": "discovery",
      },
    ],
    "filename": "input.json",
    "message": "Usage of ./node_modules/foo/node_modules/bar/index.js was increased from 1 to 2",
    "related": Array [
      Object {
        "id": "./node_modules/foo/node_modules/bar/index.js",
        "type": "module",
      },
    ],
    "type": "error",
  },
]
`;

exports[`not matches 1`] = `Array []`;
