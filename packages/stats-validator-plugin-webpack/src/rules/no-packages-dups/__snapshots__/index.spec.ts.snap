// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`exclude no exclude 1`] = `
Array [
  Object {
    "compilation": "718159f8e48dcecd92c9",
    "details": Array [
      Object {
        "content": "- node_modules/bar  1.0.0
- node_modules/foo/node_modules/bar  2.0.0",
        "type": "text",
      },
      Object {
        "content": "- node_modules/bar  1.0.0
- node_modules/foo/node_modules/bar  2.0.0",
        "type": "tty",
      },
      Object {
        "deserialize": Object {
          "content": "
                $theContext: context;
                {
                  context: {
                    exclude: $theContext.exclude.(deserializeStringOrRegexp)
                  }
                }",
          "type": "query",
        },
        "filename": "input.json",
        "query": "
  $input: resolveInputFile();
  $exclude: #.exclude;
  
  $input.group(<compilations>)
  .({file: value.pick(), compilation: key})
  .exclude({
    exclude: $exclude.[type='compilation'].name,
    get: <compilation.name>,
  })
  .({
    ...$,
    packages: compilation
    .nodeModules
    .exclude({
      exclude: $exclude.[type='package'].name,
      get: <name>,
    })
    .[instances.size() > 1]
    .({
      ...$,
      instances: instances.sort(isRoot desc, path.size() asc)
    })
    .sort(instances.size() desc, name asc)
  })
  .[packages]",
        "serialized": Object {
          "context": Object {
            "exclude": Array [
              Object {
                "name": Object {
                  "content": "baaaaaa",
                  "flags": "",
                  "type": "regexp",
                },
                "type": "package",
              },
            ],
          },
        },
        "type": "discovery",
      },
    ],
    "filename": "input.json",
    "message": "Package bar has 2 instances with 2 versions",
    "related": Array [
      Object {
        "id": "bar",
        "type": "package",
      },
      Object {
        "id": "node_modules/bar",
        "type": "package-instance",
      },
      Object {
        "id": "node_modules/foo/node_modules/bar",
        "type": "package-instance",
      },
    ],
    "type": "error",
  },
]
`;

exports[`exclude object 1`] = `Array []`;

exports[`exclude regexp 1`] = `Array []`;

exports[`exclude string 1`] = `Array []`;

exports[`should work 1`] = `
Array [
  Object {
    "compilation": "718159f8e48dcecd92c9",
    "details": Array [
      Object {
        "content": "- node_modules/bar  1.0.0
- node_modules/foo/node_modules/bar  2.0.0",
        "type": "text",
      },
      Object {
        "content": "- node_modules/bar  1.0.0
- node_modules/foo/node_modules/bar  2.0.0",
        "type": "tty",
      },
      Object {
        "deserialize": Object {
          "content": "
                $theContext: context;
                {
                  context: {
                    exclude: $theContext.exclude.(deserializeStringOrRegexp)
                  }
                }",
          "type": "query",
        },
        "filename": "input.json",
        "query": "
  $input: resolveInputFile();
  $exclude: #.exclude;
  
  $input.group(<compilations>)
  .({file: value.pick(), compilation: key})
  .exclude({
    exclude: $exclude.[type='compilation'].name,
    get: <compilation.name>,
  })
  .({
    ...$,
    packages: compilation
    .nodeModules
    .exclude({
      exclude: $exclude.[type='package'].name,
      get: <name>,
    })
    .[instances.size() > 1]
    .({
      ...$,
      instances: instances.sort(isRoot desc, path.size() asc)
    })
    .sort(instances.size() desc, name asc)
  })
  .[packages]",
        "serialized": Object {
          "context": Object {
            "exclude": Array [],
          },
        },
        "type": "discovery",
      },
    ],
    "filename": "input.json",
    "message": "Package bar has 2 instances with 2 versions",
    "related": Array [
      Object {
        "id": "bar",
        "type": "package",
      },
      Object {
        "id": "node_modules/bar",
        "type": "package-instance",
      },
      Object {
        "id": "node_modules/foo/node_modules/bar",
        "type": "package-instance",
      },
    ],
    "type": "error",
  },
]
`;
